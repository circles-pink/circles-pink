input create_languages_input {
  code: ID
  name: String
}

input create_names_input {
  id: ID
  name: String!
}

input create_views_input {
  user_created: String
  user_updated: String
  id: ID
  status: String!
  sort: Int
  date_created: Date
  date_created_func: datetime_functionsInput
  date_updated: Date
  date_updated_func: datetime_functionsInput
  enum: String!
  name: create_names_input
  translations: [create_views_translations_input]
}

input create_views_translations_input {
  id: ID
  views_id: create_views_input
  languages_id: create_languages_input
  foo: String!
}

"""ISO8601 Date values"""
scalar Date

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

input datetime_functionsInput {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type languages {
  code: ID
  name: String
}

input languages_filter {
  code: string_filter_operators
  name: string_filter_operators
  _and: [languages_filter]
  _or: [languages_filter]
}

type Mutation {
  create_names_items(filter: names_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_names_input!]): [names]
  create_names_item(data: create_names_input!): names
  create_views_items(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_views_input!]): [views]
  create_views_item(data: create_views_input!): views
  create_views_translations_items(filter: views_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_views_translations_input!]): [views_translations]
  create_views_translations_item(data: create_views_translations_input!): views_translations
  create_languages_items(filter: languages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_languages_input!]): [languages]
  create_languages_item(data: create_languages_input!): languages
  update_names_items(filter: names_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_names_input!): [names]
  update_names_item(id: ID!, data: update_names_input!): names
  update_views_items(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_views_input!): [views]
  update_views_item(id: ID!, data: update_views_input!): views
  update_views_translations_items(filter: views_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_views_translations_input!): [views_translations]
  update_views_translations_item(id: ID!, data: update_views_translations_input!): views_translations
  update_languages_items(filter: languages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_languages_input!): [languages]
  update_languages_item(id: ID!, data: update_languages_input!): languages
  delete_names_items(ids: [ID]!): delete_many
  delete_names_item(id: ID!): delete_one
  delete_views_items(ids: [ID]!): delete_many
  delete_views_item(id: ID!): delete_one
  delete_views_translations_items(ids: [ID]!): delete_many
  delete_views_translations_item(id: ID!): delete_one
  delete_languages_items(ids: [ID]!): delete_many
  delete_languages_item(id: ID!): delete_one
}

type names {
  id: ID
  name: String!
}

type names_aggregated {
  group: JSON
  avg: names_aggregated_fields
  sum: names_aggregated_fields
  count: names_aggregated_fields
  countDistinct: names_aggregated_fields
  avgDistinct: names_aggregated_fields
  sumDistinct: names_aggregated_fields
  min: names_aggregated_fields
  max: names_aggregated_fields
}

type names_aggregated_fields {
  id: Float
}

input names_filter {
  id: number_filter_operators
  name: string_filter_operators
  _and: [names_filter]
  _or: [names_filter]
}

input number_filter_operators {
  _eq: Float
  _neq: Float
  _in: [Float]
  _nin: [Float]
  _gt: Float
  _gte: Float
  _lt: Float
  _lte: Float
  _null: Boolean
  _nnull: Boolean
}

type Query {
  names(filter: names_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [names]
  names_by_id(id: ID!): names
  names_aggregated(groupBy: [String], filter: names_filter, limit: Int, search: String, sort: [String]): [names_aggregated]
  views(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [views]
  views_by_id(id: ID!): views
  views_aggregated(groupBy: [String], filter: views_filter, limit: Int, search: String, sort: [String]): [views_aggregated]
  views_translations(filter: views_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [views_translations]
  views_translations_by_id(id: ID!): views_translations
  views_translations_aggregated(groupBy: [String], filter: views_translations_filter, limit: Int, search: String, sort: [String]): [views_translations_aggregated]
  languages(filter: languages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [languages]
  languages_by_id(id: ID!): languages
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _ends_with: String
  _nends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input update_languages_input {
  code: ID
  name: String
}

input update_names_input {
  id: ID
  name: String
}

input update_views_input {
  user_created: String
  user_updated: String
  id: ID
  status: String
  sort: Int
  date_created: Date
  date_created_func: datetime_functionsInput
  date_updated: Date
  date_updated_func: datetime_functionsInput
  enum: String
  name: update_names_input
  translations: [update_views_translations_input]
}

input update_views_translations_input {
  id: ID
  views_id: update_views_input
  languages_id: update_languages_input
  foo: String
}

type views {
  user_created: String
  user_updated: String
  id: ID
  status: String!
  sort: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  enum: String!
  name(filter: names_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): names
  translations(filter: views_translations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [views_translations]
}

type views_aggregated {
  group: JSON
  avg: views_aggregated_fields
  sum: views_aggregated_fields
  count: views_aggregated_fields
  countDistinct: views_aggregated_fields
  avgDistinct: views_aggregated_fields
  sumDistinct: views_aggregated_fields
  min: views_aggregated_fields
  max: views_aggregated_fields
}

type views_aggregated_fields {
  sort: Float
  name: Float
}

input views_filter {
  user_created: string_filter_operators
  user_updated: string_filter_operators
  id: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  enum: string_filter_operators
  name: names_filter
  translations: views_translations_filter
  _and: [views_filter]
  _or: [views_filter]
}

type views_translations {
  id: ID
  views_id(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): views
  languages_id(filter: languages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): languages
  foo: String!
}

type views_translations_aggregated {
  group: JSON
  avg: views_translations_aggregated_fields
  sum: views_translations_aggregated_fields
  count: views_translations_aggregated_fields
  countDistinct: views_translations_aggregated_fields
  avgDistinct: views_translations_aggregated_fields
  sumDistinct: views_translations_aggregated_fields
  min: views_translations_aggregated_fields
  max: views_translations_aggregated_fields
}

type views_translations_aggregated_fields {
  id: Float
}

input views_translations_filter {
  id: number_filter_operators
  views_id: views_filter
  languages_id: languages_filter
  foo: string_filter_operators
  _and: [views_translations_filter]
  _or: [views_translations_filter]
}

