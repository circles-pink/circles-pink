{
  "SectionHeaderPurs": {
    "prefix": ["--- Header", "section-header"],
    "body": [
      "--------------------------------------------------------------------------------",
      "-- ${1:element}",
      "--------------------------------------------------------------------------------"
    ],
    "description": "80 column wide section header to organize source files",
    "scope": "purescript"
  },
  "SectionPurs": {
    "prefix": ["---", "section"],
    "body": [
      "--------------------------------------------------------------------------------"
    ],
    "description": "80 column wide section to organize source files",
    "scope": "purescript"
  },
  "PursTest": {
    "prefix": ["descr"],
    "body": [
      "describe \"${1:describe}\"",
      "  let",
      "    x = 1",
      "  in",
      "    it \"${2:it}\" do",
      "      x `shouldEqual` 2"
    ],
    "description": "80 column wide section to organize source files",
    "scope": "purescript"
  },
  "importPlus": {
    "prefix": ["+", "importPlus"],
    "body": ["import Type.Row (type (+))"],
    "description": "80 column wide section to organize source files",
    "scope": "purescript"
  },
  "variant constructor": {
    "prefix": ["variant constructor"],
    "body": [
      "_${1:name} :: forall r. ${2:type} -> Variant (${1/(.*)/${1:/capitalize}/} r)",
      "_${1:name} = inj (Proxy :: _ \"${1:name}\")"
    ],
    "description": "Constructor for a variant type",
    "scope": "purescript"
  },
  "SectionTS": {
    "prefix": ["// --", "section"],
    "body": [
      "// -----------------------------------------------------------------------------",
      "// ${1:element}",
      "// -----------------------------------------------------------------------------"
    ],
    "description": "80 column wide section header to organize source files",
    "scope": "typescript,typescriptreact"
  },
  "UnRemoteData": {
    "prefix": ["unRemoteData"],
    "body": [
      "_RemoteData.unRemoteData({",
      "  onNotAsked: () => ${1:element},",
      "  onLoading: () => ${1:element},",
      "  onFailure: () => ${1:element},",
      "  onSuccess: () => ${1:element},",
      "})"
    ],
    "description": "unRemoteData function template",
    "scope": "typescript,typescriptreact"
  }
}
